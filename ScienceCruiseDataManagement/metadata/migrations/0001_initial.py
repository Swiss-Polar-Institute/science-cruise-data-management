# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-02-13 05:22
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0050_organisation_city'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_set_id', models.CharField(blank=True, help_text='is a data set identifier assigned by the data center (may or may not be the same as the <Entry_ID>.', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataCenterName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=160)),
                ('long_name', models.CharField(blank=True, max_length=240, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataciteContributorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor_type', models.CharField(max_length=50)),
                ('datacite_schema_version', models.CharField(max_length=10)),
                ('in_datacite', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='DataResolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude_resolution', models.CharField(blank=True, max_length=20, null=True)),
                ('longitude_resolution', models.CharField(blank=True, max_length=20, null=True)),
                ('vertical_resolution', models.CharField(blank=True, max_length=20, null=True)),
                ('temporal_resolution', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataSetCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_title', models.CharField(blank=True, max_length=255, null=True)),
                ('dataset_release_date', models.DateField(blank=True, null=True)),
                ('version', models.CharField(blank=True, max_length=10, null=True)),
                ('other_citation_details', models.CharField(blank=True, max_length=255, null=True)),
                ('dataset_creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Person')),
                ('dataset_publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Organisation')),
            ],
        ),
        migrations.CreateModel(
            name='DatasetProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=31, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('download_date', models.DateTimeField()),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='DatasetRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distribution_size', models.CharField(blank=True, help_text='An approximate size (in KB, MB or GB) for the entire data set. Specify if data are compressed and the method of compression.', max_length=80, null=True)),
                ('fees', models.CharField(blank=True, help_text='Cost of <Distribution_Media> or distribution costs if any. Specify if there are no costs.', max_length=80, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DistributionFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distribution_format', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=80, null=True)),
                ('download_date', models.DateTimeField()),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='DistributionMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(max_length=80)),
                ('distribution_media', models.CharField(max_length=80)),
                ('download_date', models.DateTimeField()),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='HorizontalResolutionRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('horizontal_resolution_range', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='IdnNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('instrument_class', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('subtype', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_category', models.CharField(blank=True, max_length=255, null=True)),
                ('location_type', models.CharField(blank=True, max_length=255, null=True)),
                ('location_subregion1', models.CharField(blank=True, max_length=255, null=True)),
                ('location_subregion2', models.CharField(blank=True, max_length=255, null=True)),
                ('location_subregion3', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='MetadataEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_id', models.CharField(help_text='Unique document identifier of the metadata record. The identifier is case insensitive. The <Entry_ID> consists of 1 to 80 alphanumeric characters of the UTF-8 set, including underbar (_), hyphen (-) and period (.).', max_length=255, unique=True)),
                ('entry_title', models.CharField(help_text='Title of the data set described by the metadata. For example, <Entry_Title>Aerosol characterization and snow chemistry at Terra Nova Bay 2001-2003 </Entry_Title> provides an adequate amount of information to guide the user.', max_length=220)),
                ('quality', models.CharField(blank=True, help_text='This field allows the author to provide information about the quality of the data or any quality assurance procedures followed in producing the data. Include indicators of data quality or quality flags. Include recognized or potential problems with quality. Established quality control mechanisms should be included. Established quantitative quality measurements should be included.', max_length=255, null=True)),
                ('access_constraints', models.TextField(blank=True, help_text='This field allows the author to provide information about any constraints for accessing the data set. This includes any special restrictions, legal prerequisites, limitations and/or warnings on obtaining the data set.', null=True)),
                ('use_constraints', models.TextField(blank=True, help_text='This field allows the author to describe how the data may or may not be used after access is granted to assure the protection of privacy or intellectual property.  This includes any special restrictions, legal prerequisites, terms and conditions, and/or limitations on using the data set.  Data providers may request acknowledgement of the data from users and claim no responsibility for quality and completeness of data.', null=True)),
                ('data_set_language', models.CharField(blank=True, help_text='DEFAULT=English', max_length=255, null=True)),
                ('originating_center', models.CharField(blank=True, help_text='The data center or data producer who originally generated the dataset.', max_length=240, null=True)),
                ('parent_dif', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata_name', models.CharField(help_text='DEFAULT=CEOS IDN DIF', max_length=255)),
                ('metadata_version', models.CharField(help_text='DEFAULT=VERSION 9.9', max_length=80)),
                ('dif_creation_date', models.CharField(blank=True, max_length=50, null=True)),
                ('last_dif_revision_date', models.CharField(blank=True, max_length=50, null=True)),
                ('dif_revision_history', models.TextField(blank=True, null=True)),
                ('future_dif_review_date', models.CharField(blank=True, max_length=50, null=True)),
                ('private', models.CharField(blank=True, help_text='True or False', max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=255)),
                ('topic', models.CharField(max_length=255)),
                ('term', models.CharField(max_length=255)),
                ('variable_level_1', models.CharField(blank=True, max_length=255, null=True)),
                ('variable_level_2', models.CharField(blank=True, max_length=255, null=True)),
                ('variable_level_3', models.CharField(blank=True, max_length=255, null=True)),
                ('detailed_variable', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Personnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, max_length=80, null=True)),
                ('contact_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Organisation')),
                ('datacite_contributor_type', models.ManyToManyField(to='metadata.DataciteContributorType')),
                ('dataset_role', models.ManyToManyField(to='metadata.DatasetRole')),
                ('first_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='firstname', to='main.Person')),
                ('last_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lastname', to='main.Person')),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('series_entity', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bucket', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bucket_Level0', models.CharField(blank=True, max_length=255, null=True)),
                ('bucket_Level1', models.CharField(blank=True, max_length=255, null=True)),
                ('bucket_Level2', models.CharField(blank=True, max_length=255, null=True)),
                ('bucket_Level3', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('long_name', models.CharField(blank=True, max_length=255, null=True)),
                ('data_center_url', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='RUContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('subtype', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='SpatialCoverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('southernmost_latitude', models.CharField(blank=True, max_length=10, null=True)),
                ('northernmost_latitude', models.CharField(blank=True, max_length=10, null=True)),
                ('westernmost_longitude', models.CharField(blank=True, max_length=10, null=True)),
                ('easternmost_longitude', models.CharField(blank=True, max_length=10, null=True)),
                ('minimum_altitude', models.CharField(blank=True, max_length=10, null=True)),
                ('maximum_altitude', models.CharField(blank=True, max_length=10, null=True)),
                ('minimum_depth', models.CharField(blank=True, max_length=10, null=True)),
                ('maximum_depth', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abstract', models.TextField()),
                ('purpose', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TemporalCoverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('stop_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TemporalResolutionRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temporal_resolution_range', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='VerticalResolutionRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vertical_resolution_range', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_version', models.CharField(blank=True, max_length=255, null=True)),
                ('keyword_revision_date', models.DateTimeField(blank=True, null=True)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
                ('in_gcmd', models.BooleanField()),
            ],
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='data_center',
            field=models.ManyToManyField(help_text='The <Data Center> is the data center, organization, or institution responsible for distributing the data.', to='metadata.Provider'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='data_resolution',
            field=models.ManyToManyField(blank=True, to='metadata.DataResolution'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='data_set_citation',
            field=models.ManyToManyField(blank=True, to='metadata.DataSetCitation'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='data_set_progress',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.DatasetProgress'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='distribution',
            field=models.ManyToManyField(to='metadata.Distribution'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='idn_node',
            field=models.ManyToManyField(to='metadata.IdnNode'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='location',
            field=models.ManyToManyField(blank=True, to='metadata.Location'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='parameters',
            field=models.ManyToManyField(to='metadata.Parameter'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='personnel',
            field=models.ManyToManyField(help_text='The point of contact for more information about the data set or the metadata.', to='metadata.Personnel'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='project',
            field=models.ManyToManyField(blank=True, to='metadata.Project'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='sensor_name',
            field=models.ManyToManyField(blank=True, to='metadata.Instrument'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='source_name',
            field=models.ManyToManyField(blank=True, to='metadata.Platform'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='spatial_coverage',
            field=models.ManyToManyField(blank=True, to='metadata.SpatialCoverage'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='summary',
            field=models.ForeignKey(help_text='This field provides a brief description of the data set along with the purpose of the data. This allows potential users to determine if the data set is useful for their needs.', on_delete=django.db.models.deletion.CASCADE, to='metadata.Summary'),
        ),
        migrations.AddField(
            model_name='metadataentry',
            name='temporal_coverage',
            field=models.ManyToManyField(blank=True, to='metadata.TemporalCoverage'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='distribution_format',
            field=models.ForeignKey(blank=True, help_text='The data format used to distribute the data.', null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.DistributionFormat'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='distribution_media',
            field=models.ForeignKey(blank=True, help_text='The media options for the user receiving the data.', null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.DistributionMedia'),
        ),
        migrations.AddField(
            model_name='dataresolution',
            name='horizontal_resolution_range',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.HorizontalResolutionRange'),
        ),
        migrations.AddField(
            model_name='dataresolution',
            name='temporal_resolution_range',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.TemporalResolutionRange'),
        ),
        migrations.AddField(
            model_name='dataresolution',
            name='vertical_resolution_range',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metadata.VerticalResolutionRange'),
        ),
        migrations.AddField(
            model_name='datacenter',
            name='data_center_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.DataCenterName'),
        ),
        migrations.AddField(
            model_name='datacenter',
            name='personnel',
            field=models.ManyToManyField(help_text='Contact information for the data.', to='metadata.Personnel'),
        ),
    ]
